digraph G {
  node [
    shape = rect;
    fontname = "Handlee";
  ]
  edge [
    fontname = "Handlee";
  ]
  bgcolor = transparent;
  fontname = "Handlee";
  compound = true;
  s_8 [
    class = "methodDeclaration";
    label = "MethodDeclaration";
    fillcolor = white;
    style = filled;
  ];
  s_8_3 [
    class = "block";
    label = "Block";
    fillcolor = white;
    style = filled;
  ];
  s_10 [
    class = "variableDeclaration";
    label = "VariableDeclaration";
    fillcolor = white;
    style = filled;
  ];
  s_10_2 [
    class = "variableDeclarationFragment";
    label = "boolean x";
    fillcolor = white;
    style = filled;
  ];
  s_10_4 [
    class = "infixExpression infixConditional";
    label = "||";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_10_5 [
    class = "booleanLiteral literal";
    label = "true";
    fillcolor = white;
    style = filled;
  ];
  s_10_6 [
    class = "booleanLiteral literal";
    label = "false";
    fillcolor = white;
    style = filled;
  ];
  s_11 [
    class = "variableDeclaration";
    label = "VariableDeclaration";
    fillcolor = white;
    style = filled;
  ];
  s_11_2 [
    class = "variableDeclarationFragment";
    label = "boolean y";
    fillcolor = white;
    style = filled;
  ];
  s_11_4 [
    class = "booleanLiteral literal";
    label = "true";
    fillcolor = white;
    style = filled;
  ];
  s_12 [
    class = "variableDeclaration";
    label = "VariableDeclaration";
    fillcolor = white;
    style = filled;
  ];
  s_12_2 [
    class = "variableDeclarationFragment";
    label = "boolean z";
    fillcolor = white;
    style = filled;
  ];
  s_12_4 [
    class = "booleanLiteral literal";
    label = "true";
    fillcolor = white;
    style = filled;
  ];
  s_13 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_13_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_13_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_13_7 [
    class = "infixExpression infixConditional";
    label = "||";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_13_8 [
    class = "simpleName";
    label = "x";
    fillcolor = white;
    style = filled;
  ];
  s_13_9 [
    class = "simpleName";
    label = "y";
    fillcolor = white;
    style = filled;
  ];
  s_13_10 [
    class = "simpleName";
    label = "z";
    fillcolor = white;
    style = filled;
  ];
  s_14 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_14_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_14_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_14_7 [
    class = "infixExpression infixConditional";
    label = "&&";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_14_8 [
    class = "simpleName";
    label = "x";
    fillcolor = white;
    style = filled;
  ];
  s_14_9 [
    class = "simpleName";
    label = "y";
    fillcolor = white;
    style = filled;
  ];
  s_14_10 [
    class = "simpleName";
    label = "z";
    fillcolor = white;
    style = filled;
  ];
  s_15 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_15_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_15_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_15_7 [
    class = "infixExpression infixConditional";
    label = "||";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_15_8 [
    class = "simpleName";
    label = "x";
    fillcolor = white;
    style = filled;
  ];
  s_15_9 [
    class = "infixExpression infixConditional";
    label = "&&";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_15_10 [
    class = "simpleName";
    label = "y";
    fillcolor = white;
    style = filled;
  ];
  s_15_11 [
    class = "simpleName";
    label = "z";
    fillcolor = white;
    style = filled;
  ];
  s_17 [
    class = "variableDeclaration";
    label = "VariableDeclaration";
    fillcolor = white;
    style = filled;
  ];
  s_17_3 [
    class = "variableDeclarationFragment";
    label = "Integer i";
    fillcolor = white;
    style = filled;
  ];
  s_17_5 [
    class = "numberLiteral literal";
    label = "0";
    fillcolor = white;
    style = filled;
  ];
  s_18 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_18_2 [
    class = "postfixExpression";
    label = "postfixOp ++";
    fillcolor = white;
    style = filled;
  ];
  s_18_3 [
    class = "simpleName";
    label = "i";
    fillcolor = white;
    style = filled;
  ];
  s_19 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_19_2 [
    class = "prefixExpression";
    label = "prefixOp ++";
    fillcolor = white;
    style = filled;
  ];
  s_19_3 [
    class = "simpleName";
    label = "i";
    fillcolor = white;
    style = filled;
  ];
  s_20 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_20_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_20_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_20_7 [
    class = "instanceofExpression";
    label = "instanceof Object";
    fillcolor = white;
    style = filled;
  ];
  s_20_8 [
    class = "simpleName";
    label = "i";
    fillcolor = white;
    style = filled;
  ];
  s_21 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_21_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_21_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_21_7 [
    class = "castExpression";
    label = "cast Number";
    fillcolor = white;
    style = filled;
  ];
  s_21_9 [
    class = "simpleName";
    label = "i";
    fillcolor = white;
    style = filled;
  ];
  s_22 [
    class = "expressionStatement";
    label = "ExpressionStatement";
    fillcolor = white;
    style = filled;
  ];
  s_22_2 [
    class = "methodInvocation";
    label = "println()";
    fillcolor = white;
    style = filled;
  ];
  s_22_3 [
    class = "qualifiedName";
    label = "System.out";
    fillcolor = white;
    style = filled;
  ];
  s_22_10 [
    class = "simpleName";
    label = "x";
    fillcolor = white;
    style = filled;
  ];
  s_13_11 [
    class = "infixExpression infixConditional";
    label = "||";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  s_14_11 [
    class = "infixExpression infixConditional";
    label = "&&";
    fillcolor = white;
    shape = diamond;
    style = filled;
  ];
  m_25 [
    class = "method end";
    label = "return";
    fillcolor = white;
    style = filled;
  ];
  s_8 -> s_8_3;
  s_8_3 -> s_10;
  s_10 -> s_10_5;
  s_10_5 -> s_10_4;
  s_10_4 -> s_10_6 [
    label="false";
  ];
  s_10_4 -> s_10_2 [
    label="true";
  ];
  s_10_6 -> s_10_2;
  s_10_2 -> s_11;
  s_11 -> s_11_4;
  s_11_4 -> s_11_2;
  s_11_2 -> s_12;
  s_12 -> s_12_4;
  s_12_4 -> s_12_2;
  s_12_2 -> s_13;
  s_13 -> s_13_3;
  s_13_3 -> s_13_8;
  s_13_8 -> s_13_7;
  s_13_7 -> s_13_9 [
    label="false";
  ];
  s_13_9 -> s_13_11;
  s_13_11 -> s_13_10 [
    label="false";
  ];
  s_13_11 -> s_13_2 [
    label="true";
  ];
  s_13_7 -> s_13_2 [
    label="true";
  ];
  s_13_10 -> s_13_2;
  s_13_2 -> s_14;
  s_14 -> s_14_3;
  s_14_3 -> s_14_8;
  s_14_8 -> s_14_7;
  s_14_7 -> s_14_9 [
    label="true";
  ];
  s_14_9 -> s_14_11;
  s_14_11 -> s_14_10 [
    label="true";
  ];
  s_14_11 -> s_14_2 [
    label="false";
  ];
  s_14_7 -> s_14_2 [
    label="false";
  ];
  s_14_10 -> s_14_2;
  s_14_2 -> s_15;
  s_15 -> s_15_3;
  s_15_3 -> s_15_8;
  s_15_8 -> s_15_7;
  s_15_7 -> s_15_10 [
    label="false";
  ];
  s_15_10 -> s_15_9;
  s_15_9 -> s_15_11 [
    label="true";
  ];
  s_15_7 -> s_15_2 [
    label="true";
  ];
  s_15_9 -> s_15_2 [
    label="false";
  ];
  s_15_11 -> s_15_2;
  s_15_2 -> s_17;
  s_17 -> s_17_5;
  s_17_5 -> s_17_3;
  s_17_3 -> s_18;
  s_18 -> s_18_3;
  s_18_3 -> s_18_2;
  s_18_2 -> s_19;
  s_19 -> s_19_3;
  s_19_3 -> s_19_2;
  s_19_2 -> s_20;
  s_20 -> s_20_3;
  s_20_3 -> s_20_8;
  s_20_8 -> s_20_7;
  s_20_7 -> s_20_2;
  s_20_2 -> s_21;
  s_21 -> s_21_3;
  s_21_3 -> s_21_9;
  s_21_9 -> s_21_7;
  s_21_7 -> s_21_2;
  s_21_2 -> s_22;
  s_22 -> s_22_3;
  s_22_3 -> s_22_10;
  s_22_10 -> s_22_2;
  s_22_2 -> m_25;

  subgraph cluster_m_8 {
    label="method testExpressions";
    labeljust = "l";
    ranksep = 0.5;
    pencolor = transparent;
    s_8; s_8_3; s_10; s_10_2; s_10_4; s_10_5; s_10_6; s_11; s_11_2; s_11_4; s_12; s_12_2; s_12_4; s_13; s_13_2; s_13_3; s_13_7; s_13_8; s_13_9; s_13_10; s_13_11; s_14; s_14_2; s_14_3; s_14_7; s_14_8; s_14_9; s_14_10; s_14_11; s_15; s_15_2; s_15_3; s_15_7; s_15_8; s_15_9; s_15_10; s_15_11; s_17; s_17_3; s_17_5; s_18; s_18_2; s_18_3; s_19; s_19_2; s_19_3; s_20; s_20_2; s_20_3; s_20_7; s_20_8; s_21; s_21_2; s_21_3; s_21_7; s_21_9; s_22; s_22_2; s_22_3; s_22_10; m_25;
  }
}

